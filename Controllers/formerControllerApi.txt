const fs = require('fs');
const Movie = require('./../Models/movieModel');

let movies = JSON.parse(fs.readFileSync("./data/movies.json"));

exports.checkId = (req, res, next,value) => {
    console.log('Movie ID is ' + value);

        //find movie based on id parameter
   let movie =  movies.find(el => 
    el.id === value * 1
  )
  //find() is an array method

  if(!movie){
        return res.status(404).json({
            status: "fail",
            message: 'Movie with ID '+value+' is not found'
        })
  }

  next();
}


exports.validateBody = (req,res,next) => {
    if(!req.body.name || !req.body.releaseYear){
        return res.status(400).json({
            status:'fail',
            message: 'Not a valid movie data'
        });
    }
    next();
}

//ROUTE HANDLE FUNCTIONS
exports.getAllMovies = (req, res) => {
    res.status(200).json({
      status: "success",
      requestedAt: req.requestedAt,
      count: movies.length,
      data: {
        movies: movies,
      },
    });
  }


exports.getMovie =  (req, res) => {
    console.log(req.params);
    const id = req.params.id * 1;//converting to numeric value
  
    //find movie based on id parameter
   let movie =  movies.find(el => 
      el.id === id 
    )
    //find() is an array method
  
    // if(!movie){
    //       return res.status(404).json({
    //           status: "fail",
    //           message: 'Movie with ID '+id+' is not found'
    //       })
    // }
  
    //sending the response
    res.status(200).json({
          status: "success",
          data:{
              movie: movie
          } 
    });
  }

exports.createMovie = (req, res) => {
    //console.log(req.body);
    const newId = movies[movies.length - 1].id + 1;
  
    const newMovie = Object.assign(
      {
        id: newId,
      },
      req.body
    );
  
    movies.push(newMovie);
  
    fs.writeFile("./data/movies.json", JSON.stringify(movies), (err) => {
      res.status(201).json({
        status: "success",
        data: {
          movie: newMovie,
        },
      });
    });
    //res.send('Created');
  }

exports.updateMovie = (req,res) => {
    let id = req.params.id * 1; //convert from string to number
    let movieToUpdate = movies.find(el => el.id === id); //returns movie object

    
    // if(!movieToUpdate){
    //     res.status(404).json({
    //         status:'fail',
    //         message:'No movie object with ID' + id + 'is found'
    //     })
    // }
    
    let movieIndex = movies.indexOf(movieToUpdate);

    const updateMovieObject = Object.assign(movieToUpdate, req.body);
    movies[movieIndex] = movieToUpdate;

    fs.writeFile('./data/movies.json', JSON.stringify(movies), (err) => {
        res.status(200).json({
            status: "success",
            data: {
              movie: movieToUpdate,
            },
          }); 
    })
}

exports.deleteMovie = (req,res) =>{
    const id = req.params.id * 1; //convert id to numeric type
    const movieToDelete = movies.find((el => el.id === id));

    // if(!movieToDelete){
    //     res.status(404).json({
    //         status:'fail',
    //         message:'No movie object with ID ' + id + ' is found to delete'
    //     })
    // }

    const index = movies.indexOf(movieToDelete);

    movies.splice(index,1);

    fs.writeFile('./data/movies.json', JSON.stringify(movies), (err) => {
        res.status(204).json({
            status: "success",
            data: {
              movie: null,
            },
          }); 
    })
};




//routes former code

const express = require('express');
const moviesController = require('./../Controllers/moviesController');

const router = express.Router();

//param middle ware

router.param('id', moviesController.checkId);


//because they have the same endpoint

router.route('/')
    .get(moviesController.getAllMovies)
    .post(moviesController.validateBody,moviesController.createMovie)

// app.route('/api/v1/movies')
//     .get(getAllMovies)
//     .post(createMovie)

router.route('/:id')
    .get(moviesController.getMovie)
    .patch(moviesController.updateMovie)
    .delete(moviesController.deleteMovie)

module.exports = router;

//app.use('/api/v1/movies',moviesRouter)//mounting routes


//validation in controller
exports.validateBody = (req,res,next) => {
    if(!req.body.name || !req.body.releaseYear){
        return res.status(400).json({
            status:'fail',
            message: 'Not a valid movie data'
        });
    }
    next();
}